library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use work.Somador;
-- Este mÃ³dulo faz a soma de uma unidade em A --
entity incremento1 is
    Port ( A0 : in  STD_LOGIC := '1';
           A1 : in  STD_LOGIC := '1';
           A2 : in  STD_LOGIC := '1';
           A3 : in  STD_LOGIC := '0';
			  ENABLE : in  STD_LOGIC;
           Cout : out  STD_LOGIC;
           OUT0 : OUT  STD_LOGIC;
           OUT1 : OUT  STD_LOGIC;
           OUT2 : OUT  STD_LOGIC;
           OUT3 : OUT  STD_LOGIC;
			  clk : in STD_LOGIC;
			  ZERO : OUT  STD_LOGIC;
           OVERFLOW : OUT  STD_LOGIC);
end incremento1;

architecture Behavioral of incremento1 is
           signal C1 : STD_LOGIC;
           signal C2 : STD_LOGIC;
           signal C3 : STD_LOGIC;
			  
component somador is
    Port ( A0 : in  STD_LOGIC := '0';
           A1 : in  STD_LOGIC := '0';
           A2 : in  STD_LOGIC := '0';
           A3 : in  STD_LOGIC := '0';
           B0 : in  STD_LOGIC := '1';
           B1 : in  STD_LOGIC := '0';
           B2 : in  STD_LOGIC := '0';
           B3 : in  STD_LOGIC := '0';
			  clk : in STD_LOGIC;
           ENABLE : in  STD_LOGIC;
			  Cout : out  STD_LOGIC;
           OUT0 : OUT  STD_LOGIC;
           OUT1 : OUT  STD_LOGIC;
           OUT2 : OUT  STD_LOGIC;
           OUT3 : OUT  STD_LOGIC;
			  ZERO : OUT  STD_LOGIC;
           OVERFLOW : OUT  STD_LOGIC);
end component;


begin



somaA0 : Somador port map (
	A0 => A0,
	A1 => A1,
	A2 => A2,
	A3 => A3,
	ENABLE => ENABLE,
	B0 => '1',
	B1 => '0',
	B2	=> '0',
	B3 => '0',
	CLK => CLK,
	ZERO => ZERO,
	OUT0 => OUT0,
	OUT1 => OUT1,
	OUT2 => OUT2,
	OUT3 => OUT3,
	COUT => COUT,
	OVERFLOW => OVERFLOW);
end Behavioral;

