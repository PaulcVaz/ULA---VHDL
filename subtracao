library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use work.Somador;
use work.trocaSinal;

-- Este módulo faz a subtração de dois números binários A e B --

entity subtracao is
    Port ( a0 : in  STD_LOGIC := '1';
           a1 : in  STD_LOGIC := '1';
           a2 : in  STD_LOGIC := '1';
           a3 : in  STD_LOGIC := '0';
           b0 : in  STD_LOGIC := '1';
           b1 : in  STD_LOGIC := '0';
           b2 : in  STD_LOGIC := '0';
           b3 : in  STD_LOGIC := '0';
			  ENABLE : IN STD_LOGIC;
			  clk : in  STD_LOGIC;
			  
           out0 : out  STD_LOGIC;
           out1 : out  STD_LOGIC;
           out2 : out  STD_LOGIC;
           out3 : out  STD_LOGIC;
           overflow : out  STD_LOGIC;
			  
			  ZERO : OUT  STD_LOGIC;
           cout : OUT  STD_LOGIC;
           neg : out  STD_LOGIC);
end subtracao;

architecture Behavioral of subtracao is
component Somador is

    Port ( A0 : in  STD_LOGIC := '0';
           A1 : in  STD_LOGIC := '0';
           A2 : in  STD_LOGIC := '0';
           A3 : in  STD_LOGIC := '1';
           B0 : in  STD_LOGIC := '0';
           B1 : in  STD_LOGIC := '0';
           B2 : in  STD_LOGIC := '0';
           B3 : in  STD_LOGIC := '0';
			  ENABLE : IN STD_LOGIC;
           Cout : inout  STD_LOGIC;
			  clk : in  STD_LOGIC;
			  ZERO : OUT  STD_LOGIC;
           OUT0 : OUT  STD_LOGIC;
           OUT1 : OUT  STD_LOGIC;
           OUT2 : OUT  STD_LOGIC;
           OUT3 : OUT  STD_LOGIC;
           OVERFLOW : OUT  STD_LOGIC);

end component;

component trocaSinal is
    Port ( A0 : in  STD_LOGIC;
           A1 : in  STD_LOGIC;
           A2 : in  STD_LOGIC;
           A3 : in  STD_LOGIC;
			  enable : in STD_LOGIC;
           Cout : inout  STD_LOGIC;
           OUT0 : OUT  STD_LOGIC;
           OUT1 : OUT  STD_LOGIC;
           OUT2 : OUT  STD_LOGIC;
           OUT3 : OUT  STD_LOGIC;
			  neg : out std_logic;
			  clk : in  STD_LOGIC;
           OVERFLOW : OUT  STD_LOGIC);
end component;

signal inv0 : std_logic;
signal inv1 : std_logic;
signal inv2 : std_logic;
signal inv3 : std_logic;
signal enable_neg : std_logic;
SIGNAL O0 : STD_LOGIC;
SIGNAL O1 : STD_LOGIC;
SIGNAL O2 : STD_LOGIC;
SIGNAL O3 : STD_LOGIC;
signal co : STD_LOGIC;

begin

trksig :  trocaSinal port map (
	a0 => b0,
	a1 => b1,
	a2 => b2,
	a3 => b3,
	clk => clk,
	ENABLE => ENABLE,
	out0 => inv0,
	out1 => inv1,
	out2 => inv2,
	out3 => inv3);
	
soma : Somador port map(
	a0 => a0,
	a1 => a1,
	a2 => a2,
	a3 => a3,
	b0 => inv0,
	b1 => inv1,
	b2 => inv2,
	b3 => inv3,
	clk => clk,
	ENABLE => ENABLE,
	out0 => out0,
	out1 => out1,
	out2 => out2,
	out3 => o3,
	cout => co,
	ZERO => ZERO,
	overflow => overflow);

out3<=o3;
cout<=co;
neg<=o3;


end Behavioral;

